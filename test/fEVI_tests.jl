using ContextualBandits
using Distributions
using Random
using Test

@testset "fEVI functions" begin
    n = 3
    gn = 3
    # The tests were initially randomly generated but it is now hard coded
    # rng = MersenneTwister(1234)
    # theta = rand(rng, n*gn)
    # Sigma = rand(rng, n*gn, n*gn)
    # Sigma = Sigma * Sigma'
    # sample_std = rand(rng, n*gn)
    # gt = rand(rng,1:gn)
    # p = rand(rng,gn)
    # p /= sum(p)

    theta = [0.5908446386657102, 0.7667970365022592, 0.5662374165061859, 0.4600853424625171, 0.7940257103317943, 0.8541465903790502, 0.20058603493384108, 0.2986142783434118, 0.24683718661000897]
    Sigma = [2.1602872505358155 1.2202007588774622 1.3403996098486533 1.5824380583946023 2.0826486537920306 2.0433915204185533 0.9394728006620835 1.3488180990673884 2.097836228470376;
        1.2202007588774622 1.9087135205562002 1.464012063735929 1.8906610404903392 2.1621820033081796 1.9333850265344168 1.4594154297173882 0.6924831009763439 1.8703847546539711;
        1.3403996098486533 1.464012063735929 2.1819310536487295 2.4122622935177715 2.264833519158077 2.0766443330573985 1.6168256621291281 1.0568718938900432 1.5063336821165034;
        1.5824380583946023 1.8906610404903392 2.4122622935177715 3.478969653252517 2.392386068447968 2.3578978109288626 1.9762687666451233 0.9316416735483777 2.171519107520088;
        2.0826486537920306 2.1621820033081796 2.264833519158077 2.392386068447968 3.7636229673005785 2.7122624645582087 1.9132064015973298 1.5043262418427097 2.591239697823122;
        2.0433915204185533 1.9333850265344168 2.0766443330573985 2.3578978109288626 2.7122624645582087 3.105088977172865 1.595578216194317 1.4041862480268872 2.3069611290030343;
        0.9394728006620835 1.4594154297173882 1.6168256621291281 1.9762687666451233 1.9132064015973298 1.595578216194317 1.7037654452591864 0.6975881155552733 1.5142784253287425;
        1.3488180990673884 0.6924831009763439 1.0568718938900432 0.9316416735483777 1.5043262418427097 1.4041862480268872 0.6975881155552733 1.0788602247492678 1.308357025809792;
        2.097836228470376 1.8703847546539711 1.5063336821165034 2.171519107520088 2.591239697823122 2.3069611290030343 1.5142784253287425 1.308357025809792 3.201471476634866]
    sample_std = [0.6334273711460707, 0.3378650847422675, 0.1129874379422362, 0.7829903116706189, 0.8380421929441089, 0.08785980672452753, 0.3865675692738708, 0.33057868371649746, 0.7480405976865343]
    gt = 2
    p = [0.2271420910130968, 0.24892731338795088, 0.5239305955989523]
    fEVI_off = fEVI(n, gn, theta, Sigma, sample_std, gt, p)
    # The expected results were computed from other code to validate
    @test fEVI_off ≈ [-2.289241727007539, -2.5010572326520846, -2.1910002668147732]

    # rng = MersenneTwister(12345)
    # theta = rand(rng, n*gn)
    # Sigma = rand(rng, n*gn, n*gn)
    # Sigma = Sigma * Sigma'
    # sample_std = rand(rng, n*gn)
    # gt = rand(rng,1:gn)
    # p = rand(rng,gn)
    # p /= sum(p)

    theta = [0.5627138851056968, 0.8499394786290626, 0.37160535186424815, 0.28336464179809084, 0.381127966318632, 0.36580119057192695, 0.8350140149860443, 0.26002375370524433, 0.9223171788742697]
    Sigma = [3.0397416038870713 1.739968642590248 2.636866746841593 2.040619329192173 2.2958889855619664 1.300007667528173 1.1820139863830939 1.6327448836022838 1.514971808257388;
        1.739968642590248 2.4853679797098405 2.6335343908860214 2.5220742453346823 2.3827336530455985 1.8283786271710798 1.8833833590134814 1.794657421242659 1.8324153970519148;
        2.636866746841593 2.6335343908860214 4.260760358515406 3.46236045431522 3.0554558946174137 2.3731265603855958 2.5394161264644795 2.4164124115456707 2.3369274553293065;
        2.040619329192173 2.5220742453346823 3.46236045431522 3.874260044374474 3.1117008374220134 2.6798987992384973 2.478991933639282 2.1571714579041856 2.367358006287089;
        2.2958889855619664 2.3827336530455985 3.0554558946174137 3.1117008374220134 3.1226191114454758 2.109250317275179 2.063285638436704 2.1726751518964247 1.8828570710339545;
        1.300007667528173 1.8283786271710798 2.3731265603855958 2.6798987992384973 2.109250317275179 2.3550896910036925 1.8714446207198734 1.725106983765722 1.642278381123706;
        1.1820139863830939 1.8833833590134814 2.5394161264644795 2.478991933639282 2.063285638436704 1.8714446207198734 2.22206883580391 2.066397065752037 1.6826797617334182;
        1.6327448836022838 1.794657421242659 2.4164124115456707 2.1571714579041856 2.1726751518964247 1.725106983765722 2.066397065752037 2.5605337263088876 1.6357697611447322;
        1.514971808257388 1.8324153970519148 2.3369274553293065 2.367358006287089 1.8828570710339545 1.642278381123706 1.6826797617334182 1.6357697611447322 1.7505659920814696]
    sample_std = [0.734942032102714, 0.8515593282843967, 0.6505420952045136, 0.4487579017975383, 0.41079618290148234, 0.1570795574063375, 0.38534698938904466, 0.5927640678618074, 0.6529019643419052]
    gt = 1
    p = [0.5255001929451046, 0.3039572524825745, 0.17054255457232093]
    fEVI_off = fEVI(n, gn, theta, Sigma, sample_std, gt, p)
    # The expected results were computed from other code to validate
    @test fEVI_off ≈ [-1.8715300384364837, -2.829324939335114, -2.4135617711801074]
end

@testset "fEVI policies" begin
    rng = Xoshiro(1234)
    n = 3
    FX = CovariatesIndependent([Categorical([1/4,1/2,1/4]), OrdinalDiscrete([1/3,1/3,1/3])])
    m = length(FX)
    labeling = [true, false, false, true, 
                true, true, true, false,
                true, true, true, false,
                false, true, true, false]
    theta0 = rand(rng, sum(labeling))
    Sigma0 = rand(rng, sum(labeling), sum(labeling))
    Sigma0 = Sigma0 * Sigma0'
    sample_std = rand(rng)
    fEVI_off = fEVIDiscrete(n, m, theta0, Sigma0, sample_std, FX, labeling)
    P = 0
    T = 10
    fEVI_on = fEVIDiscreteOnOff(n, m, theta0, Sigma0, sample_std, FX, P, T, labeling)
    ContextualBandits.initialize!(fEVI_off)
    ContextualBandits.initialize!(fEVI_on)
    W = 1
    X = rand(rng, FX)
    Y = rand(rng)
    ContextualBandits.state_update!(fEVI_off, W, X, Y)
    ContextualBandits.state_update!(fEVI_on, W, X, Y)
    Xcurrent = rand(rng, FX)
    w = ContextualBandits.allocation(fEVI_off, Xcurrent, W, X, Y, rng)
    @test w in 1:n
    w = ContextualBandits.allocation(fEVI_on, Xcurrent, W, X, Y, rng)
    @test w in 1:n
    wpost = ContextualBandits.implementation(fEVI_off, Xcurrent, W, X, Y)
    @test all(wpost .∈ Ref(1:n))
    wpost = ContextualBandits.implementation(fEVI_on, Xcurrent, W, X, Y)
    @test all(wpost .∈ Ref(1:n))

    # The following tests that the policies can be simulated without errors
    policies = Dict("fEVIoff"=>fEVI_off, "fEVIon" => fEVI_on)
    mu = rand(rng, sum(labeling))
    outcome_model = OutcomeLinear(n, m, mu, sample_std, labeling)
    r = simulation_stochastic(10, FX, n, T, policies, outcome_model; post_reps=10, rng)
    r = r["output"]
end